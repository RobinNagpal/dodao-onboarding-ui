scalar Any

# Queries
type Query {
  space(id: String): Space

  spaceDiscordGuild(spaceId: String!): Any

  spaces(
    first: Int
    skip: Int
    where: SpaceWhere
    orderBy: String
    orderDirection: OrderDirection
  ): [Space]

  guide(uuid: String): Guide!

  guides(
    first: Int
    skip: Int
    where: GuideWhere
    orderBy: String
    orderDirection: OrderDirection
  ): [Guide!]

  guideBundle(uuid: String): GuideBundle!

  guideBundles(
    first: Int
    skip: Int
    where: GuideBundleWhere
    orderBy: String
    orderDirection: OrderDirection
  ): [GuideBundle!]

  guideSubmissions(
    first: Int
    skip: Int
    where: GuideSubmissionWhere
    orderBy: String
    orderDirection: OrderDirection
  ): [GuideSubmission!]!

  aliases(
    first: Int
    skip: Int
    where: AliasWhere
    orderBy: String
    orderDirection: OrderDirection
  ): [Alias]

  follows(
    first: Int
    skip: Int
    where: FollowWhere
    orderBy: String
    orderDirection: OrderDirection
    blockchain: String
  ): [Follow]

  subscriptions(
    first: Int
    skip: Int
    where: SubscriptionWhere
    orderBy: String
    orderDirection: OrderDirection
  ): [Subscription]
}

type Mutation {
  addDiscordCredentials(
    spaceId: String!
    code: String!
    redirectUri: String!
  ): Space!

  upsertProjectGalaxyAccessToken(spaceId: String!, accessToken: String!): Space!

  upsertGnosisSafeWallets(
    spaceId: String!
    wallets: [GnosisSafeWalletInput!]!
  ): Space!
}

input SpaceWhere {
  id: String
  id_in: [String]
}

input GuideWhere {
  id: String
  id_in: [String]
  author: String
  author_in: [String]
  guide_type: String
  guide_type_in: [String]
  ipfs: String
  ipfs_in: [String]
  publish_status: String
  publish_status_in: [String!]
  created: Int
  created_in: [Int]
  created_gt: Int
  created_gte: Int
  created_lt: Int
  created_lte: Int
  space: String
  space_in: [String]
}

input GuideBundleWhere {
  id: String
  id_in: [String]
  ipfs: String
  ipfs_in: [String]
  space: String
  space_in: [String]
  bundle_type: String
  bundle_type_in: [String]
  author: String
  author_in: [String]
  created: Int
  created_in: [Int]
  created_gt: Int
  created_gte: Int
  created_lt: Int
  created_lte: Int
  publish_status: String
  publish_status_in: [String!]
}

input GuideSubmissionWhere {
  id: String
  id_in: [String]
  ipfs: String
  ipfs_in: [String]
  space: String
  space_in: [String]
  guide_uuid: String
  guide_uuid_in: [String]
  created: Int
  created_in: [Int]
  created_gt: Int
  created_gte: Int
  created_lt: Int
  created_lte: Int
}

input AliasWhere {
  id: String
  id_in: [String]
  ipfs: String
  ipfs_in: [String]
  address: String
  address_in: [String]
  alias: String
  alias_in: [String]
  created: Int
  created_in: [Int]
  created_gt: Int
  created_gte: Int
  created_lt: Int
  created_lte: Int
}

input FollowWhere {
  id: String
  id_in: [String]
  ipfs: String
  ipfs_in: [String]
  follower: String
  follower_in: [String]
  space: String
  space_in: [String]
  created: Int
  created_in: [Int]
  created_gt: Int
  created_gte: Int
  created_lt: Int
  created_lte: Int
}

input SubscriptionWhere {
  id: String
  id_in: [String]
  ipfs: String
  ipfs_in: [String]
  address: String
  address_in: [String]
  space: String
  space_in: [String]
  created: Int
  created_in: [Int]
  created_gt: Int
  created_gte: Int
  created_lt: Int
  created_lte: Int
}

input GnosisSafeWalletInput {
  id: String!
  chainId: Int!
  order: Int!
  tokenContractAddress: String!
  walletAddress: String!
  walletName: String!
}

enum OrderDirection {
  asc
  desc
}

type Space {
  id: String!
  about: String
  admins: [String!]!
  avatar: String
  blogSite: String
  categories: [String]
  creator: String!
  domain: String
  discordInvite: String
  filters: SpaceFilters
  github: String
  guidesPageFooterContent: String
  guidesPageHeaderContent: String
  guidesBundlePageFooterContent: String
  guidesBundlePageHeaderContent: String
  location: String
  members: [String!]!
  mission: String!
  name: String
  plugins: Any
  private: Boolean
  publicForumWebsite: String
  referenceDocsWebsite: String
  skin: String!
  spaceIntegrations: SpaceIntegrations
  strategies: [Strategy]
  symbol: String
  telegramInvite: String
  terms: String
  twitter: String
  validation: Strategy
  voting: SpaceVoting
  website: String
  email: String
  network: String
}

type SpaceIntegrations {
  discordGuildId: String
  projectGalaxyTokenLastFour: String
  gnosisSafeWallets: [GnosisSafeWallet!]
}

type SpaceFilters {
  minScore: Float
  onlyMembers: Boolean
}

type SpaceVoting {
  delay: Int
  period: Int
  type: String
  quorum: Float
  blind: Boolean
  hideAbstain: Boolean
}

type QuestionChoice {
  content: String!
  key: String!
  order: Int!
}

type GuideQuestion {
  answerKeys: [String!]!
  choices: [QuestionChoice!]!
  content: String!
  order: Int!
  type: String!
  uuid: String!
}

type GuideUserInput {
  label: String!
  order: Int!
  type: String!
  required: Boolean!
  uuid: String!
}

type UserDiscordConnect {
  order: Int!
  type: String!
  uuid: String!
}

union GuideStepItem = GuideQuestion | GuideUserInput | UserDiscordConnect

type GuideStep {
  content: String!
  created: Int!
  id: String!
  name: String!
  order: Int!
  stepItems: [GuideStepItem!]!
  uuid: String!
}

type GuideIntegrations {
  discordRoleIds: [String!]
  # number of answers that should be correct in order to get discord score
  discordRolePassingCount: Int
  discordWebhook: String
  projectGalaxyCredentialId: String
  projectGalaxyOatMintUrl: String
  projectGalaxyOatPassingCount: Int
}

type Guide {
  authors: [String!]!
  categories: [String!]!
  postSubmissionStepContent: String
  content: String!
  created: Int!
  guideIntegrations: GuideIntegrations!
  guideType: String!
  id: String!
  ipfs: String!
  name: String!
  previousId: String
  publishStatus: String!
  showIncorrectOnCompletion: Boolean!
  socialShareImage: String
  space: Space!
  steps: [GuideStep!]!
  thumbnail: String
  uuid: String!
  version: Int!
  link: String!
}

type GuideInBundle {
  categories: [String!]!
  content: String!
  created: Int!
  discordWebhook: String
  guideType: String!
  name: String!
  order: Int!
  thumbnail: String
  uuid: String!
  link: String!
}

type GuideBundle {
  authors: [String!]!
  bundleGuides: [GuideInBundle!]!
  categories: [String!]!
  content: String!
  created: Int!
  discordWebhook: String
  duration: String!
  excerpt: String!
  highlights: [String!]!
  id: String!
  ipfs: String!
  name: String!
  publishStatus: String!
  socialShareImage: String
  space: Space!
  thumbnail: String
  uuid: String!
  version: Int!
  link: String!
}

type GuideQuestionSubmission {
  selectedAnswerKeys: [String!]!
  uuid: String!
}

type GuideStepSubmission {
  questionResponses: [GuideQuestionSubmission!]!
  uuid: String!
}

type GuideSubmissionResult {
  correctQuestions: [String!]!
  wrongQuestions: [String!]!
  allQuestions: [String!]!
}

type GuideSubmission {
  id: String!
  ipfs: String!
  created: Int!
  createdBy: String!
  guideId: String!
  guideIpfs: String!
  guideUuid: String!
  result: GuideSubmissionResult!
  spaceId: String!
  steps: [GuideStepSubmission!]
  uuid: String!
}

type Strategy {
  name: String!
  params: Any
}

type Alias {
  id: String!
  ipfs: String
  address: String!
  alias: String!
  created: Int!
}

type Follow {
  id: String!
  ipfs: String
  follower: String!
  space: Space!
  created: Int!
}

type Subscription {
  id: String!
  ipfs: String
  address: String!
  space: Space!
  created: Int!
}

type GnosisSafeWallet {
  id: String!
  chainId: Int!
  order: Int!
  tokenContractAddress: String!
  walletAddress: String!
  walletName: String!
}
